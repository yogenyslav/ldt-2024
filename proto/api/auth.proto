syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package="internal/api/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "API"
    description: "Документация к API-сервису команды misis.tech"
    license: {
      name: "BSD 3-Clause License";
      url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
    };
  }
  security_definitions: {
    security: {
      key: "Authorization";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  }
};

service AuthService {
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "Логин"
      description: "Авторизация пользователя по логину и паролю"
      tags: ["auth"]
      responses: {
        key: "200"
        value: {
          description: "Успешная авторизация. Возвращает токен и роли пользователя. Соответствие ролей: 1 - администратор, 2 - аналитик, 3 - закупщик"
          examples: {
            key: "application/json"
            value: "{\"token\": \"some_random_access_token\", \"roles\": [1]}"
          }
        }
      }
      responses: {
        key: "401"
        value: {
          description: "Неверный логин или пароль"
        }
      }
    };
  }
}

message LoginRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Данные для авторизации"
      description: "Модель запроса на авторизацию, содержащая логин и пароль пользователя."
      required: ["username", "password"]
    }
    example: "{\"username\": \"test@test.com\", \"password\": \"test123456\"}"
  };
  string username = 1;
  string password = 2;
}

enum UserRole {
  ROLE_UNDEFINED = 0;
  ROLE_ADMIN = 1;
  ROLE_ANALYST = 2;
  ROLE_BUYER = 3;
}

message LoginResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Результат авторизации"
      description: "Модель ответа на запрос авторизации, содержащая токен и роли пользователя. Соответствие ролей: 1 - администратор, 2 - аналитик, 3 - закупщик"
    }
    example: "{\"token\": \"some_random_access_token\", \"roles\": [2, 3]}"
  };
  string token = 1;
  repeated UserRole roles = 2;
}
syntax = "proto3";

package api;

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package="internal/api/pb";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  info: {
    title: "API prompter"
    description: "Документация к API-сервису команды misis.tech"
    license: {
      name: "BSD 3-Clause License";
      url: "https://github.com/grpc-ecosystem/grpc-gateway/blob/main/LICENSE";
    };
  }
  security_definitions: {
    security: {
      key: "Authorization";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: "Authorization";
      }
    }
  }
};

service AuthService {
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/api/v1/auth/login"
      body: "*"
    };
  }
}

message LoginRequest {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Login request"
      description: "Login request model holding credentials for authorization."
      required: ["username", "password"]
    }
    example: "{\"username\": \"test@test.com\", \"password\": \"test123456\"}"
  };
  string username = 1;
  string password = 2;
}

message LoginResponse {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_schema) = {
    json_schema: {
      title: "Login response"
      description: "Login response returning a token for authorization."
    }
    example: "{\"token\": \"some_random_access_token\"}"
  };
  string token = 1;
}
// Code generated by MockGen. DO NOT EDIT.
// Source: ../../api/pb/prompter_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=../../api/pb/prompter_grpc.pb.go -destination=./mocks/prompter.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	pb "github.com/yogenyslav/ldt-2024/chat/internal/api/pb"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockPrompterClient is a mock of PrompterClient interface.
type MockPrompterClient struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterClientMockRecorder
}

// MockPrompterClientMockRecorder is the mock recorder for MockPrompterClient.
type MockPrompterClientMockRecorder struct {
	mock *MockPrompterClient
}

// NewMockPrompterClient creates a new mock instance.
func NewMockPrompterClient(ctrl *gomock.Controller) *MockPrompterClient {
	mock := &MockPrompterClient{ctrl: ctrl}
	mock.recorder = &MockPrompterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompterClient) EXPECT() *MockPrompterClientMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockPrompterClient) Extract(ctx context.Context, in *pb.ExtractReq, opts ...grpc.CallOption) (*pb.ExtractedPrompt, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Extract", varargs...)
	ret0, _ := ret[0].(*pb.ExtractedPrompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockPrompterClientMockRecorder) Extract(ctx, in any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockPrompterClient)(nil).Extract), varargs...)
}

// MockPrompterServer is a mock of PrompterServer interface.
type MockPrompterServer struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterServerMockRecorder
}

// MockPrompterServerMockRecorder is the mock recorder for MockPrompterServer.
type MockPrompterServerMockRecorder struct {
	mock *MockPrompterServer
}

// NewMockPrompterServer creates a new mock instance.
func NewMockPrompterServer(ctrl *gomock.Controller) *MockPrompterServer {
	mock := &MockPrompterServer{ctrl: ctrl}
	mock.recorder = &MockPrompterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompterServer) EXPECT() *MockPrompterServerMockRecorder {
	return m.recorder
}

// Extract mocks base method.
func (m *MockPrompterServer) Extract(arg0 context.Context, arg1 *pb.ExtractReq) (*pb.ExtractedPrompt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Extract", arg0, arg1)
	ret0, _ := ret[0].(*pb.ExtractedPrompt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Extract indicates an expected call of Extract.
func (mr *MockPrompterServerMockRecorder) Extract(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Extract", reflect.TypeOf((*MockPrompterServer)(nil).Extract), arg0, arg1)
}

// mustEmbedUnimplementedPrompterServer mocks base method.
func (m *MockPrompterServer) mustEmbedUnimplementedPrompterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPrompterServer")
}

// mustEmbedUnimplementedPrompterServer indicates an expected call of mustEmbedUnimplementedPrompterServer.
func (mr *MockPrompterServerMockRecorder) mustEmbedUnimplementedPrompterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPrompterServer", reflect.TypeOf((*MockPrompterServer)(nil).mustEmbedUnimplementedPrompterServer))
}

// MockUnsafePrompterServer is a mock of UnsafePrompterServer interface.
type MockUnsafePrompterServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafePrompterServerMockRecorder
}

// MockUnsafePrompterServerMockRecorder is the mock recorder for MockUnsafePrompterServer.
type MockUnsafePrompterServerMockRecorder struct {
	mock *MockUnsafePrompterServer
}

// NewMockUnsafePrompterServer creates a new mock instance.
func NewMockUnsafePrompterServer(ctrl *gomock.Controller) *MockUnsafePrompterServer {
	mock := &MockUnsafePrompterServer{ctrl: ctrl}
	mock.recorder = &MockUnsafePrompterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafePrompterServer) EXPECT() *MockUnsafePrompterServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedPrompterServer mocks base method.
func (m *MockUnsafePrompterServer) mustEmbedUnimplementedPrompterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedPrompterServer")
}

// mustEmbedUnimplementedPrompterServer indicates an expected call of mustEmbedUnimplementedPrompterServer.
func (mr *MockUnsafePrompterServerMockRecorder) mustEmbedUnimplementedPrompterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedPrompterServer", reflect.TypeOf((*MockUnsafePrompterServer)(nil).mustEmbedUnimplementedPrompterServer))
}

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.26.1
// source: api/predictor.proto

package pb

import (
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Path string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_predictor_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_api_predictor_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_api_predictor_proto_rawDescGZIP(), []int{0}
}

func (x *Source) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Source) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type PrepareDataReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources      []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	Organization string    `protobuf:"bytes,2,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *PrepareDataReq) Reset() {
	*x = PrepareDataReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_predictor_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrepareDataReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareDataReq) ProtoMessage() {}

func (x *PrepareDataReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_predictor_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareDataReq.ProtoReflect.Descriptor instead.
func (*PrepareDataReq) Descriptor() ([]byte, []int) {
	return file_api_predictor_proto_rawDescGZIP(), []int{1}
}

func (x *PrepareDataReq) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *PrepareDataReq) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type PredictReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         QueryType `protobuf:"varint,1,opt,name=type,proto3,enum=api.QueryType" json:"type,omitempty"`
	Product      string    `protobuf:"bytes,2,opt,name=product,proto3" json:"product,omitempty"`
	Period       string    `protobuf:"bytes,3,opt,name=period,proto3" json:"period,omitempty"`
	Organization string    `protobuf:"bytes,4,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *PredictReq) Reset() {
	*x = PredictReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_predictor_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictReq) ProtoMessage() {}

func (x *PredictReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_predictor_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictReq.ProtoReflect.Descriptor instead.
func (*PredictReq) Descriptor() ([]byte, []int) {
	return file_api_predictor_proto_rawDescGZIP(), []int{2}
}

func (x *PredictReq) GetType() QueryType {
	if x != nil {
		return x.Type
	}
	return QueryType_UNDEFINED
}

func (x *PredictReq) GetProduct() string {
	if x != nil {
		return x.Product
	}
	return ""
}

func (x *PredictReq) GetPeriod() string {
	if x != nil {
		return x.Period
	}
	return ""
}

func (x *PredictReq) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type PredictResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data []byte `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *PredictResp) Reset() {
	*x = PredictResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_predictor_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredictResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredictResp) ProtoMessage() {}

func (x *PredictResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_predictor_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredictResp.ProtoReflect.Descriptor instead.
func (*PredictResp) Descriptor() ([]byte, []int) {
	return file_api_predictor_proto_rawDescGZIP(), []int{3}
}

func (x *PredictResp) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type UniqueCodesReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Organization string `protobuf:"bytes,1,opt,name=organization,proto3" json:"organization,omitempty"`
}

func (x *UniqueCodesReq) Reset() {
	*x = UniqueCodesReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_predictor_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueCodesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueCodesReq) ProtoMessage() {}

func (x *UniqueCodesReq) ProtoReflect() protoreflect.Message {
	mi := &file_api_predictor_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueCodesReq.ProtoReflect.Descriptor instead.
func (*UniqueCodesReq) Descriptor() ([]byte, []int) {
	return file_api_predictor_proto_rawDescGZIP(), []int{4}
}

func (x *UniqueCodesReq) GetOrganization() string {
	if x != nil {
		return x.Organization
	}
	return ""
}

type UniqueCodesResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Codes []*UniqueCode `protobuf:"bytes,1,rep,name=codes,proto3" json:"codes,omitempty"`
}

func (x *UniqueCodesResp) Reset() {
	*x = UniqueCodesResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_predictor_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueCodesResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueCodesResp) ProtoMessage() {}

func (x *UniqueCodesResp) ProtoReflect() protoreflect.Message {
	mi := &file_api_predictor_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueCodesResp.ProtoReflect.Descriptor instead.
func (*UniqueCodesResp) Descriptor() ([]byte, []int) {
	return file_api_predictor_proto_rawDescGZIP(), []int{5}
}

func (x *UniqueCodesResp) GetCodes() []*UniqueCode {
	if x != nil {
		return x.Codes
	}
	return nil
}

type UniqueCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Segment string `protobuf:"bytes,1,opt,name=segment,proto3" json:"segment,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Regular bool   `protobuf:"varint,3,opt,name=regular,proto3" json:"regular,omitempty"`
}

func (x *UniqueCode) Reset() {
	*x = UniqueCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_predictor_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UniqueCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UniqueCode) ProtoMessage() {}

func (x *UniqueCode) ProtoReflect() protoreflect.Message {
	mi := &file_api_predictor_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UniqueCode.ProtoReflect.Descriptor instead.
func (*UniqueCode) Descriptor() ([]byte, []int) {
	return file_api_predictor_proto_rawDescGZIP(), []int{6}
}

func (x *UniqueCode) GetSegment() string {
	if x != nil {
		return x.Segment
	}
	return ""
}

func (x *UniqueCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UniqueCode) GetRegular() bool {
	if x != nil {
		return x.Regular
	}
	return false
}

var File_api_predictor_proto protoreflect.FileDescriptor

var file_api_predictor_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65,
	0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x72, 0x6f, 0x6d, 0x70,
	0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x01, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x3a, 0xa7, 0x01, 0x92,
	0x41, 0xa3, 0x01, 0x0a, 0x7c, 0x2a, 0x1d, 0xd0, 0x98, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1,
	0x87, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd,
	0xd1, 0x8b, 0xd1, 0x85, 0x32, 0x4d, 0xd0, 0x98, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x87,
	0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xb4, 0xd0, 0xbb, 0xd1, 0x8f, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0,
	0xb4, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xb8, 0x20,
	0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0,
	0xb3, 0xd0, 0xb0, 0xd2, 0x01, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x32, 0x23, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x31, 0x22, 0x2c, 0x22, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3a, 0x20, 0x22, 0x70,
	0x61, 0x74, 0x68, 0x31, 0x22, 0x7d, 0x22, 0x87, 0x04, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73,
	0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x3a, 0xa9, 0x03, 0x92, 0x41, 0xa5, 0x03, 0x0a, 0xa8, 0x02, 0x2a, 0x33,
	0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0,
	0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe,
	0xd0, 0xb2, 0xd0, 0xba, 0xd1, 0x83, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd1, 0x85, 0x32, 0xd7, 0x01, 0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe,
	0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb3,
	0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd1, 0x83, 0x20, 0xd0, 0xb8, 0x20,
	0xd0, 0xbf, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb3, 0x20, 0xd0,
	0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xbf, 0xd0, 0xbe,
	0x20, 0x2e, 0x63, 0x73, 0x76, 0x2f, 0x2e, 0x78, 0x6c, 0x73, 0x78, 0x20, 0xd1, 0x84, 0xd0, 0xb0,
	0xd0, 0xb9, 0xd0, 0xbb, 0xd0, 0xb0, 0xd0, 0xbc, 0x2e, 0x20, 0xd0, 0x9d, 0xd0, 0xb0, 0xd0, 0xb7,
	0xd0, 0xb2, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd1, 0x84, 0xd0, 0xb0, 0xd0,
	0xb9, 0xd0, 0xbb, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xbb, 0xd0, 0xb6,
	0xd0, 0xbd, 0xd1, 0x8b, 0x20, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xbf, 0xd0, 0xb0, 0xd0,
	0xb4, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1, 0x81, 0x20, 0xd0, 0xb8, 0xd0, 0xbc, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd1, 0x80, 0xd1, 0x82, 0xd0, 0xb8, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0,
	0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xbc, 0xd0, 0xb8, 0x20, 0xd0, 0xb2, 0x20, 0xd1,
	0x81, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb5, 0xd0, 0xbc, 0xd1, 0x83, 0xd2, 0x01, 0x07,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0xd2, 0x01, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x78, 0x7b, 0x22, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x31, 0x22, 0x2c, 0x22, 0x70, 0x61, 0x74, 0x68, 0x22, 0x3a, 0x20,
	0x22, 0x70, 0x61, 0x74, 0x68, 0x31, 0x22, 0x7d, 0x2c, 0x20, 0x7b, 0x22, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x3a, 0x20, 0x22, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x32, 0x22, 0x2c, 0x22, 0x70, 0x61,
	0x74, 0x68, 0x22, 0x3a, 0x20, 0x22, 0x70, 0x61, 0x74, 0x68, 0x32, 0x22, 0x7d, 0x5d, 0x2c, 0x20,
	0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20,
	0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x22, 0x7d,
	0x22, 0xc9, 0x03, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x22, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0xc0, 0x02, 0x92, 0x41, 0xbc, 0x02,
	0x0a, 0xe3, 0x01, 0x2a, 0x35, 0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1,
	0x81, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1,
	0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5,
	0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x82, 0xd0, 0xb0, 0x32, 0x80, 0x01, 0xd0, 0x97, 0xd0,
	0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xb5, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x82,
	0xd0, 0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0x20, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c,
	0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0, 0xd0, 0xbc, 0x3a, 0x20, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbf,
	0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0x2c,
	0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x82, 0x2c,
	0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb4, 0xd2, 0x01, 0x04,
	0x74, 0x79, 0x70, 0x65, 0xd2, 0x01, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0xd2, 0x01,
	0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0xd2, 0x01, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x32, 0x54, 0x7b, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a,
	0x20, 0x22, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x3a,
	0x20, 0x22, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x31, 0x22, 0x2c, 0x20, 0x22, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x22, 0x3a, 0x20, 0x22, 0x39, 0x22, 0x2c, 0x20, 0x22, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x72, 0x67,
	0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x31, 0x22, 0x7d, 0x22, 0xbb, 0x01, 0x0a,
	0x0b, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x12, 0x12, 0x0a, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x3a, 0x97, 0x01, 0x92, 0x41, 0x93, 0x01, 0x0a, 0x90, 0x01, 0x2a, 0x0e, 0xd0, 0x9f, 0xd1, 0x80,
	0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x82, 0x32, 0x77, 0xd0, 0x9f, 0xd1, 0x80,
	0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x82, 0x2c, 0x20, 0xd1, 0x81, 0xd0, 0xbe,
	0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x80, 0xd0, 0xb6, 0xd0, 0xb0, 0xd1, 0x89, 0xd0, 0xb8, 0xd0, 0xb9,
	0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xb2,
	0x20, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82, 0xd0, 0xb5, 0x20,
	0x6a, 0x73, 0x6f, 0x6e, 0x20, 0xd0, 0xb2, 0x20, 0xd0, 0xb1, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb0,
	0xd1, 0x80, 0xd0, 0xbd, 0xd0, 0xbe, 0xd0, 0xbc, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xb5, 0xd0,
	0xb4, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb0, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb8, 0xd2, 0x01, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xa9, 0x02, 0x0a, 0x0e, 0x55,
	0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a,
	0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x3a, 0xf2, 0x01, 0x92, 0x41, 0xee, 0x01, 0x0a, 0xc8, 0x01, 0x2a, 0x51, 0xd0, 0x97, 0xd0,
	0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0, 0xb0, 0x20, 0xd0,
	0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd1,
	0x83, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x32, 0x64,
	0xd0, 0x97, 0xd0, 0xb0, 0xd0, 0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0x20, 0xd0, 0xbd, 0xd0,
	0xb0, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd,
	0xd0, 0xb8, 0xd0, 0xb5, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xba, 0xd0,
	0xb0, 0x20, 0xd1, 0x83, 0xef, 0xbf, 0xbd, 0xef, 0xbf, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0,
	0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0,
	0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80,
	0xd0, 0xbe, 0xd0, 0xb2, 0xd2, 0x01, 0x0c, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x32, 0x21, 0x7b, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x20, 0x22, 0x6f, 0x72, 0x67, 0x61, 0x6e, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x31, 0x22, 0x7d, 0x22, 0xb4, 0x02, 0x0a, 0x0f, 0x55, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x12, 0x25, 0x0a, 0x05, 0x63, 0x6f,
	0x64, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x63, 0x6f, 0x64, 0x65,
	0x73, 0x3a, 0xf9, 0x01, 0x92, 0x41, 0xf5, 0x01, 0x0a, 0x73, 0x2a, 0x2c, 0xd0, 0xa1, 0xd0, 0xbf,
	0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd1, 0x83, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xba,
	0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x32, 0x3b, 0xd0, 0xa1, 0xd0, 0xbf, 0xd0, 0xb8,
	0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd1, 0x83, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1,
	0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0xd2, 0x01, 0x05, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x32, 0x7e, 0x7b,
	0x22, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22, 0x73, 0x65, 0x67, 0x6d,
	0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22,
	0x3a, 0x20, 0x22, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0x20, 0x31, 0x22,
	0x2c, 0x22, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x3a, 0x20, 0x74, 0x72, 0x75, 0x65,
	0x7d, 0x2c, 0x20, 0x7b, 0x22, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22,
	0x32, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xd0, 0xa2, 0xd0, 0xbe,
	0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0x20, 0x32, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x67, 0x75, 0x6c,
	0x61, 0x72, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d, 0x5d, 0x7d, 0x22, 0x85, 0x02,
	0x0a, 0x0a, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73,
	0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65,
	0x67, 0x75, 0x6c, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x67,
	0x75, 0x6c, 0x61, 0x72, 0x3a, 0xae, 0x01, 0x92, 0x41, 0xaa, 0x01, 0x0a, 0x6f, 0x2a, 0x28, 0xd0,
	0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd0, 0xb0, 0x32, 0x28, 0xd0, 0xa3, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0,
	0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb9, 0x20, 0xd0, 0xba,
	0xd0, 0xbe, 0xd0, 0xb4, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd0,
	0xb0, 0xd2, 0x01, 0x07, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0xd2, 0x01, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0xd2, 0x01, 0x07, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x32, 0x37, 0x7b, 0x22,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x22, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1,
	0x80, 0x20, 0x31, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x3a, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x7d, 0x32, 0xc4, 0x09, 0x0a, 0x09, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x74, 0x6f, 0x72, 0x12, 0x93, 0x03, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0xd6, 0x02, 0x92, 0x41, 0xa9, 0x02, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74,
	0x6f, 0x72, 0x12, 0x33, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x82,
	0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xba, 0xd0, 0xb0, 0x20, 0xd0, 0xb8, 0x20, 0xd0, 0xbf, 0xd0, 0xb0,
	0xd1, 0x80, 0xd1, 0x81, 0xd0, 0xb8, 0xd0, 0xbd, 0xd0, 0xb3, 0x20, 0xd0, 0xb4, 0xd0, 0xb0, 0xd0,
	0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x1a, 0x92, 0x01, 0xd0, 0x9f, 0xd0, 0xb5, 0xd1, 0x80,
	0xd0, 0xb5, 0xd0, 0xb2, 0xd0, 0xb5, 0xd1, 0x81, 0xd1, 0x82, 0xd0, 0xb8, 0x20, 0xd0, 0xb4, 0xd0,
	0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd0, 0xb8, 0xd0, 0xb7, 0x20, 0x2e,
	0x63, 0x73, 0x76, 0x2f, 0x2e, 0x78, 0x6c, 0x73, 0x78, 0x20, 0xd0, 0xb2, 0xd0, 0xbe, 0x20, 0xd0,
	0xb2, 0xd0, 0xbd, 0xd1, 0x83, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xbd, 0xd0, 0xbd, 0xd0,
	0xb8, 0xd0, 0xb9, 0x20, 0xd1, 0x84, 0xd0, 0xbe, 0xd1, 0x80, 0xd0, 0xbc, 0xd0, 0xb0, 0xd1, 0x82,
	0x2c, 0x20, 0xd1, 0x81, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xbe, 0xd1, 0x80, 0xd1,
	0x8b, 0xd0, 0xbc, 0x20, 0xd0, 0xb1, 0xd1, 0x83, 0xd0, 0xb4, 0xd0, 0xb5, 0xd1, 0x82, 0x20, 0xd1,
	0x80, 0xd0, 0xb0, 0xd0, 0xb1, 0xd0, 0xbe, 0xd1, 0x82, 0xd0, 0xb0, 0xd1, 0x82, 0xd1, 0x8c, 0x20,
	0xd0, 0xbc, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb5, 0xd0, 0xbb, 0xd1, 0x8c, 0x4a, 0x3d, 0x0a, 0x03,
	0x32, 0x30, 0x30, 0x12, 0x36, 0x0a, 0x34, 0xd0, 0x94, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd0, 0xb5, 0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd,
	0xd0, 0xbe, 0x20, 0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xb3, 0xd0, 0xbe, 0xd1, 0x82, 0xd0,
	0xbe, 0xd0, 0xb2, 0xd0, 0xbb, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x8b, 0x62, 0x13, 0x0a, 0x11, 0x0a,
	0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x00,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x23, 0x3a, 0x01, 0x2a, 0x22, 0x1e, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x2f, 0x70, 0x72, 0x65,
	0x70, 0x61, 0x72, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x12, 0xbb, 0x02, 0x0a, 0x07, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65, 0x64,
	0x69, 0x63, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x22, 0x8c, 0x02, 0x92, 0x41, 0xe4, 0x01, 0x0a,
	0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x1f, 0xd0, 0x9f, 0xd0, 0xbe,
	0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf, 0xd1,
	0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x82, 0x1a, 0x6a, 0xd0, 0x9f, 0xd0,
	0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd0, 0xbf,
	0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x82, 0x20, 0xd0, 0xbf, 0xd0,
	0xbe, 0x20, 0xd1, 0x84, 0xd0, 0xb8, 0xd0, 0xbb, 0xd1, 0x8c, 0xd1, 0x82, 0xd1, 0x80, 0xd0, 0xb0,
	0xd0, 0xbc, 0x3a, 0x20, 0xd1, 0x82, 0xd0, 0xb8, 0xd0, 0xbf, 0x20, 0xd0, 0xb7, 0xd0, 0xb0, 0xd0,
	0xbf, 0xd1, 0x80, 0xd0, 0xbe, 0xd1, 0x81, 0xd0, 0xb0, 0x2c, 0x20, 0xd0, 0xbf, 0xd1, 0x80, 0xd0,
	0xbe, 0xd0, 0xb4, 0xd1, 0x83, 0xd0, 0xba, 0xd1, 0x82, 0x2c, 0x20, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1,
	0x80, 0xd0, 0xb8, 0xd0, 0xbe, 0xd0, 0xb4, 0x4a, 0x35, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0x2e,
	0x0a, 0x2c, 0xd0, 0x9f, 0xd1, 0x80, 0xd0, 0xb5, 0xd0, 0xb4, 0xd0, 0xb8, 0xd0, 0xba, 0xd1, 0x82,
	0x20, 0xd1, 0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd, 0xd0, 0xbe, 0x20,
	0xd0, 0xbf, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0x62, 0x13,
	0x0a, 0x11, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1e, 0x3a, 0x01, 0x2a, 0x22, 0x19, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x2f,
	0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x12, 0xe2, 0x03, 0x0a, 0x0b, 0x55, 0x6e, 0x69, 0x71,
	0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x55, 0x6e,
	0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x55, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x22, 0xa7, 0x03, 0x92, 0x41, 0xfd, 0x02, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x21, 0xd0, 0xa0, 0xd0, 0xb5, 0xd0, 0xb3, 0xd1, 0x83, 0xd0, 0xbb,
	0xd1, 0x8f, 0xd1, 0x80, 0xd0, 0xbd, 0xd1, 0x8b, 0xd0, 0xb5, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0,
	0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0xd1, 0x8b, 0x1a, 0x4c, 0xd0, 0x9f, 0xd0, 0xbe, 0xd0, 0xbb, 0xd1,
	0x83, 0xd1, 0x87, 0xd0, 0xb8, 0xd1, 0x82, 0xd1, 0x8c, 0x20, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb8,
	0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd1, 0x83, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0,
	0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1, 0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd1, 0x82, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1,
	0x80, 0xd0, 0xbe, 0xd0, 0xb2, 0x4a, 0xe9, 0x01, 0x0a, 0x03, 0x32, 0x30, 0x30, 0x12, 0xe1, 0x01,
	0x0a, 0x4a, 0xd0, 0xa1, 0xd0, 0xbf, 0xd0, 0xb8, 0xd1, 0x81, 0xd0, 0xbe, 0xd0, 0xba, 0x20, 0xd1,
	0x83, 0xd0, 0xbd, 0xd0, 0xb8, 0xd0, 0xba, 0xd0, 0xb0, 0xd0, 0xbb, 0xd1, 0x8c, 0xd0, 0xbd, 0xd1,
	0x8b, 0xd1, 0x85, 0x20, 0xd0, 0xba, 0xd0, 0xbe, 0xd0, 0xb4, 0xd0, 0xbe, 0xd0, 0xb2, 0x20, 0xd1,
	0x83, 0xd1, 0x81, 0xd0, 0xbf, 0xd0, 0xb5, 0xd1, 0x88, 0xd0, 0xbd, 0xd0, 0xbe, 0x20, 0xd0, 0xbf,
	0xd0, 0xbe, 0xd0, 0xbb, 0xd1, 0x83, 0xd1, 0x87, 0xd0, 0xb5, 0xd0, 0xbd, 0x22, 0x92, 0x01, 0x0a,
	0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f,
	0x6e, 0x12, 0x7e, 0x7b, 0x22, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x22, 0x3a, 0x20, 0x5b, 0x7b, 0x22,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x3a, 0x20, 0x22, 0x31, 0x22, 0x2c, 0x22, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22, 0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1,
	0x80, 0x20, 0x31, 0x22, 0x2c, 0x22, 0x72, 0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x3a, 0x20,
	0x74, 0x72, 0x75, 0x65, 0x7d, 0x2c, 0x20, 0x7b, 0x22, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x3a, 0x20, 0x22, 0x32, 0x22, 0x2c, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20, 0x22,
	0xd0, 0xa2, 0xd0, 0xbe, 0xd0, 0xb2, 0xd0, 0xb0, 0xd1, 0x80, 0x20, 0x32, 0x22, 0x2c, 0x22, 0x72,
	0x65, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x22, 0x3a, 0x20, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x7d, 0x5d,
	0x7d, 0x62, 0x13, 0x0a, 0x11, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x12, 0x1e, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x74, 0x6f, 0x72, 0x2f,
	0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x73, 0x42, 0xe9, 0x01, 0x92,
	0x41, 0xd4, 0x01, 0x12, 0xa9, 0x01, 0x0a, 0x03, 0x41, 0x50, 0x49, 0x12, 0x48, 0xd0, 0x94, 0xd0,
	0xbe, 0xd0, 0xba, 0xd1, 0x83, 0xd0, 0xbc, 0xd0, 0xb5, 0xd0, 0xbd, 0xd1, 0x82, 0xd0, 0xb0, 0xd1,
	0x86, 0xd0, 0xb8, 0xd1, 0x8f, 0x20, 0xd0, 0xba, 0x20, 0x41, 0x50, 0x49, 0x2d, 0xd1, 0x81, 0xd0,
	0xb5, 0xd1, 0x80, 0xd0, 0xb2, 0xd0, 0xb8, 0xd1, 0x81, 0xd1, 0x83, 0x20, 0xd0, 0xba, 0xd0, 0xbe,
	0xd0, 0xbc, 0xd0, 0xb0, 0xd0, 0xbd, 0xd0, 0xb4, 0xd1, 0x8b, 0x20, 0x6d, 0x69, 0x73, 0x69, 0x73,
	0x2e, 0x74, 0x65, 0x63, 0x68, 0x2a, 0x58, 0x0a, 0x14, 0x42, 0x53, 0x44, 0x20, 0x33, 0x2d, 0x43,
	0x6c, 0x61, 0x75, 0x73, 0x65, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x68,
	0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x65, 0x63, 0x6f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2f, 0x62, 0x6c,
	0x6f, 0x62, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x4c, 0x49, 0x43, 0x45, 0x4e, 0x53, 0x45, 0x5a,
	0x26, 0x0a, 0x24, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x13, 0x08, 0x02, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x02, 0x5a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_predictor_proto_rawDescOnce sync.Once
	file_api_predictor_proto_rawDescData = file_api_predictor_proto_rawDesc
)

func file_api_predictor_proto_rawDescGZIP() []byte {
	file_api_predictor_proto_rawDescOnce.Do(func() {
		file_api_predictor_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_predictor_proto_rawDescData)
	})
	return file_api_predictor_proto_rawDescData
}

var file_api_predictor_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_api_predictor_proto_goTypes = []interface{}{
	(*Source)(nil),          // 0: api.Source
	(*PrepareDataReq)(nil),  // 1: api.PrepareDataReq
	(*PredictReq)(nil),      // 2: api.PredictReq
	(*PredictResp)(nil),     // 3: api.PredictResp
	(*UniqueCodesReq)(nil),  // 4: api.UniqueCodesReq
	(*UniqueCodesResp)(nil), // 5: api.UniqueCodesResp
	(*UniqueCode)(nil),      // 6: api.UniqueCode
	(QueryType)(0),          // 7: api.QueryType
	(*emptypb.Empty)(nil),   // 8: google.protobuf.Empty
}
var file_api_predictor_proto_depIdxs = []int32{
	0, // 0: api.PrepareDataReq.sources:type_name -> api.Source
	7, // 1: api.PredictReq.type:type_name -> api.QueryType
	6, // 2: api.UniqueCodesResp.codes:type_name -> api.UniqueCode
	1, // 3: api.Predictor.PrepareData:input_type -> api.PrepareDataReq
	2, // 4: api.Predictor.Predict:input_type -> api.PredictReq
	4, // 5: api.Predictor.UniqueCodes:input_type -> api.UniqueCodesReq
	8, // 6: api.Predictor.PrepareData:output_type -> google.protobuf.Empty
	3, // 7: api.Predictor.Predict:output_type -> api.PredictResp
	5, // 8: api.Predictor.UniqueCodes:output_type -> api.UniqueCodesResp
	6, // [6:9] is the sub-list for method output_type
	3, // [3:6] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_api_predictor_proto_init() }
func file_api_predictor_proto_init() {
	if File_api_predictor_proto != nil {
		return
	}
	file_api_prompter_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_api_predictor_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_predictor_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrepareDataReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_predictor_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_predictor_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredictResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_predictor_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueCodesReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_predictor_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueCodesResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_predictor_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UniqueCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_predictor_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_api_predictor_proto_goTypes,
		DependencyIndexes: file_api_predictor_proto_depIdxs,
		MessageInfos:      file_api_predictor_proto_msgTypes,
	}.Build()
	File_api_predictor_proto = out.File
	file_api_predictor_proto_rawDesc = nil
	file_api_predictor_proto_goTypes = nil
	file_api_predictor_proto_depIdxs = nil
}

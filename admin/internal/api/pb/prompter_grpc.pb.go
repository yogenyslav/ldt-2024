// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0
// source: api/prompter.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Prompter_Extract_FullMethodName       = "/api.Prompter/Extract"
	Prompter_RespondStream_FullMethodName = "/api.Prompter/RespondStream"
)

// PrompterClient is the client API for Prompter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PrompterClient interface {
	Extract(ctx context.Context, in *ExtractReq, opts ...grpc.CallOption) (*ExtractedPrompt, error)
	RespondStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (Prompter_RespondStreamClient, error)
}

type prompterClient struct {
	cc grpc.ClientConnInterface
}

func NewPrompterClient(cc grpc.ClientConnInterface) PrompterClient {
	return &prompterClient{cc}
}

func (c *prompterClient) Extract(ctx context.Context, in *ExtractReq, opts ...grpc.CallOption) (*ExtractedPrompt, error) {
	out := new(ExtractedPrompt)
	err := c.cc.Invoke(ctx, Prompter_Extract_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *prompterClient) RespondStream(ctx context.Context, in *StreamReq, opts ...grpc.CallOption) (Prompter_RespondStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &Prompter_ServiceDesc.Streams[0], Prompter_RespondStream_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &prompterRespondStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Prompter_RespondStreamClient interface {
	Recv() (*StreamResp, error)
	grpc.ClientStream
}

type prompterRespondStreamClient struct {
	grpc.ClientStream
}

func (x *prompterRespondStreamClient) Recv() (*StreamResp, error) {
	m := new(StreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PrompterServer is the server API for Prompter service.
// All implementations must embed UnimplementedPrompterServer
// for forward compatibility
type PrompterServer interface {
	Extract(context.Context, *ExtractReq) (*ExtractedPrompt, error)
	RespondStream(*StreamReq, Prompter_RespondStreamServer) error
	mustEmbedUnimplementedPrompterServer()
}

// UnimplementedPrompterServer must be embedded to have forward compatible implementations.
type UnimplementedPrompterServer struct {
}

func (UnimplementedPrompterServer) Extract(context.Context, *ExtractReq) (*ExtractedPrompt, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Extract not implemented")
}
func (UnimplementedPrompterServer) RespondStream(*StreamReq, Prompter_RespondStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method RespondStream not implemented")
}
func (UnimplementedPrompterServer) mustEmbedUnimplementedPrompterServer() {}

// UnsafePrompterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PrompterServer will
// result in compilation errors.
type UnsafePrompterServer interface {
	mustEmbedUnimplementedPrompterServer()
}

func RegisterPrompterServer(s grpc.ServiceRegistrar, srv PrompterServer) {
	s.RegisterService(&Prompter_ServiceDesc, srv)
}

func _Prompter_Extract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExtractReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PrompterServer).Extract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Prompter_Extract_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PrompterServer).Extract(ctx, req.(*ExtractReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Prompter_RespondStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PrompterServer).RespondStream(m, &prompterRespondStreamServer{stream})
}

type Prompter_RespondStreamServer interface {
	Send(*StreamResp) error
	grpc.ServerStream
}

type prompterRespondStreamServer struct {
	grpc.ServerStream
}

func (x *prompterRespondStreamServer) Send(m *StreamResp) error {
	return x.ServerStream.SendMsg(m)
}

// Prompter_ServiceDesc is the grpc.ServiceDesc for Prompter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Prompter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Prompter",
	HandlerType: (*PrompterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Extract",
			Handler:    _Prompter_Extract_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "RespondStream",
			Handler:       _Prompter_RespondStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "api/prompter.proto",
}

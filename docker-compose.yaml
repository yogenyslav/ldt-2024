volumes:
  pg_data:
  jaeger_data:
  prom_data:
  redis_data:
  redis_conf:
  mongo_data:
  predictor_data:
  s3_data:

services:
  jaeger:
    image: jaegertracing/all-in-one
    container_name: jaeger
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    volumes:
      - jaeger_data:/tmp
    ports:
      - "5775:5775"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
      - "4317:4317"
      - "4318:4318"
    restart: unless-stopped

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yaml"
    ports:
      - "9090:9090"
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prom_data:/prometheus

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "4000:3000"
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=${GF_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GF_ADMIN_PASSWORD}
    volumes:
      - ./grafana:/etc/grafana/provisioning/datasources

  pg:
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    ports:
      - "5432:5432"
    volumes:
      - pg_data:/var/lib/postgresql/data

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.5
    restart: unless-stopped
    environment:
      - KEYCLOAK_ADMIN=${KEYCLOAK_ADMIN}
      - KEYCLOAK_ADMIN_PASSWORD=${KEYCLOAK_ADMIN_PASSWORD}
      - KC_HOSTNAME=${KEYCLOAK_HOSTNAME}
      - KC_DB_URL_HOST=${KEYCLOAK_DB_HOST}
      - KC_DB_URL_PORT=5432
      - KC_DB_URL_DATABASE=${POSTGRES_DB}
      - KC_DB_USERNAME=${POSTGRES_USER}
      - KC_DB_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "8080:8080"
    command: start-dev --db postgres --http-enabled true --proxy edge

  redis:
    image: redis:7.2.4
    restart: always
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - redis_conf:/usr/local/etc/redis/redis.conf

  mongo:
    image: mongo:5.0
    restart: always
    ports:
      - "27017:27017"
    volumes:
      - ./data:/data/csv
      - mongo_data:/data/db
      - mongo_data:/data/configdb

  s3:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - s3_data:/data
    environment:
      MINIO_ROOT_USER: ${MINIO_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_PASSWORD}
    command: server --console-address ":9001" /data

  prompter:
    build:
      context: ./prompter
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    image: prompter
    ports:
      - "9990:9990"
    depends_on:
      - jaeger

  predictor:
    build:
      context: ./predictor
      dockerfile: Dockerfile
    restart: always
    env_file:
      - .env
    image: predictor
    ports:
      - "9980:9980"
    volumes:
      - predictor_data:/root/.cache/huggingface
    depends_on:
      - mongo

  chat:
    build:
      context: ./chat
      dockerfile: Dockerfile
      target: prod
    restart: always
    env_file:
      - .env
    image: chat
    ports:
      - "10000:10000"
      - "10001:10001"
    depends_on:
      - pg
      - api
      - jaeger
      - keycloak

  api:
    build:
      context: ./api
      dockerfile: Dockerfile
      target: prod
    restart: always
    env_file:
      - .env
    image: api
    ports:
      - "9999:9999"
      - "9998:9998"
      - "9991:9991"
    depends_on:
      - pg
      - jaeger
      - keycloak
      - prompter
      - predictor

  bot:
    build:
      context: ./chat
      dockerfile: BotDockerfile
      target: prod
    restart: always
    env_file:
      - .env
    image: bot
    depends_on:
      - pg
      - api
      - jaeger
      - keycloak
      - redis

  admin:
    build:
      context: ./admin
      dockerfile: Dockerfile
      target: prod
    restart: always
    env_file:
      - .env
    image: admin
    ports:
      - "12000:12000"
      - "12001:12001"
    depends_on:
      - pg
      - api
      - jaeger
      - keycloak

  frontend:
    build:
        context: ./frontend
        dockerfile: Dockerfile
    container_name: frontend
    restart: always
    env_file:
      - .env
    ports:
        - "3000:3000"
